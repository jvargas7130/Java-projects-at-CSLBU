import java.awt.Point;

/**
 * This class is the attributes of what the trainer will do in his or her path
 * as pokemon trainer.
 * 
 * @author Jesus Vargas
 *
 */
public class Player extends Trainer {

	/**
	 * trainer amount of potions
	 */
	private int potions = 5;

	/**
	 * trainers amount of pokeballs
	 */
	private int pokeballs = 5;

	/**
	 * trainers amount of money
	 */
	private int money = 20;

	/*
	 * location of player
	 */
	private Point location;

	/**
	 * Player constructor
	 * 
	 * @param name
	 *            Trainer'sname being passed in
	 * @param hp
	 *            Trainer's
	 */
	public Player(String name, int hp, Point start) {
		super(name, hp);
		location = start;
	}

	/**
	 * Location accessor
	 * 
	 * @return Point object loacation
	 */
	public Point getLocation() {
		return location;
	}
	
	public void setLocation(Point p){
		location = p;
	}
	/**
	 * NOrth travel method 
	 * 
	 * @param m Map object 
	 * @return c char 
	 */
	public char goNorth(Map m) {
		Point p = getLocation();
		
	
		int x = (int) p.getX();
		int y = (int) p.getY();
		boolean test = InputTest.checkInt(x,y-1);

		
		if(test == true){
				Point nextP = new Point(x, y - 1);
					setLocation(nextP);
				char c = m.getCharAtLoc(nextP);
				return c;
				
		}
		return 'k';

	}
	
	/**
	 * South travel method 
	 * 
	 * @param m Map object 
	 * @return c char 
	 */
	public char goSouth(Map m) {
		Point p = getLocation();
		int x = (int) p.getX();
		int y = (int) p.getY();
		
		boolean test = InputTest.checkInt(x,y + 1);
		if(test == true){
			Point nextP = new Point(x, y + 1);
			setLocation(nextP);
			char c = m.getCharAtLoc(nextP);
			return c;
		}
	
		return 'k';

	}
	
	/**
	 * East travel method 
	 * 
	 * @param m Map object 
	 * @return c char 
	 */
	public char goEast(Map m) {
		Point p = getLocation();
		int x = (int) p.getX();
		int y = (int) p.getY();
		
		boolean test = InputTest.checkInt(x + 1,y);
		if(test == true){
			Point nextP = new Point(x + 1, y);
			setLocation(nextP);
			char c = m.getCharAtLoc(nextP);
		
			return c;
		}
		return 'k';
	}
	
	/**
	 * West travel method 
	 * 
	 * @param m Map object 
	 * @return c char 
	 */
	public char goWest(Map m) {
		Point p = getLocation();
		int x = (int) p.getX();
		int y = (int) p.getY();
		
		boolean test = InputTest.checkInt(x - 1,y);
		if(test == true){
				Point nextP = new Point(x - 1, y);
				setLocation(nextP);
				char c = m.getCharAtLoc(nextP);

				return c;
		}
		return 'k';
	}

	/**
	 * Trainer uses potion to heal pokemon
	 */
	public void usePotion() {

		if (getNumPotionsLeft() > 0) {
			potions -= 1;
		} else {
			potions = 0;
		}

	}

	/**
	 * Number of potions that are left
	 * 
	 * @return number of potions
	 */
	public int getNumPotionsLeft() {
		return potions;

	}

	/**
	 * Trainer uses pokeball
	 */
	public void usePokeball() {

		if (getNumPokeballsLeft() > 0) {
			pokeballs -= 1;
		} else {
			pokeballs = 0;
		}
	}

	/**
	 * gets the number of pokeballs
	 * 
	 * @return number of pokeballs
	 */
	public int getNumPokeballsLeft() {
		return pokeballs;

	}

	/**
	 * adds more potions to trainer inventory
	 */
	public void buyPotion() {

		potions += 2;
	}

	/**
	 * adds more pokeballs to trainer inventory
	 */
	public void buyPokeball() {
		pokeballs += 3;
	}

	/**
	 * Decrease the amount of money trainer has
	 * 
	 * @param price
	 *            amount of money being decreased
	 */
	public void spendMoney(int price) {
		money -= price;
	}

	public void gainMoney(int price) {
		money += price;
	}

	/**
	 * Gets the amount of money left
	 * 
	 * @return amount of money
	 */
	public int getMoneyLeft() {
		return money;
	}

	@Override
	void attackSpeach() {

		System.out.println("I choose you " + getCurrentPokemon().getName());

	}

	@Override
	void winSpeach() {
		if (getCurrentPokemon().getType() == 0) {
			System.out.println("We did it! " + getCurrentPokemon().getName());
		} else if (getCurrentPokemon().getType() == 1) {
			System.out.println("I AM THE VERY BEST, LIKE NO ONE EVER WAS!!");
		} else if (getCurrentPokemon().getType() == 2) {
			System.out.println("Yay!!");
		} else if (getCurrentPokemon().getType() == 3) {
			System.out.println("I won today but there is still tomorrow");
		}

	}

	@Override
	void lossSpeach() {
		if (getCurrentPokemon().getType() == 0) {
			System.out.println(
					"Its ok " + getCurrentPokemon().getName() + " Everybody makes a wrong turn once in a while!! :(");
		} else if (getCurrentPokemon().getType() == 1) {
			System.out.println("We cant give up. Next Time!");
		} else if (getCurrentPokemon().getType() == 2) {
			System.out.println("I need more training!!");
		} else if (getCurrentPokemon().getType() == 3) {
			System.out.println("I will prove to the world that i am The greatest Pokemon Trainer!");
		}

	}

	/**
	 * Player chooses style of fight
	 * 
	 */
	@Override
	int chooseStyle() {
		System.out.println("Chosse Attack Type");
		System.out.println("1. Basic");
		System.out.println("2. Special");
		int moves = CheckInput.checkInt(1, 2);
		return moves;
	}

	@Override
	int chooseMove(int style) {
		int move = 0;

		if (style == 1) {// basic attack
			getCurrentPokemon().displayBasicMenu();
			move = CheckInput.checkInt(1, 3);

		} else if (style == 2) {// special

			getCurrentPokemon().displaySpecialMenu();
			move = CheckInput.checkInt(1, 3);
		}

		return move;
	}

}
