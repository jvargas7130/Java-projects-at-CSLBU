
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * This program creates a class map that stores a map in an array and then uses
 * a point to locate the start and continued location of the player
 * 
 * @author jesus Vargas
 *
 *
 */
public class Map {
	/**
	 * map with hidden icons
	 */
	char[][] map;

	/**
	 * True map
	 */
	boolean[][] revealed;

	/**
	 * Map constructor
	 */
	public Map() {

	}

	/**
	 * Generate Area method stores a map in an array
	 * 
	 * @param areaNum
	 *            area where player is located
	 */
	public void generateArea(int areaNum) {

		map = new char[5][5];
		revealed = new boolean[5][5];
		String num = "Area" + areaNum + ".txt";

		try {
			int counter = 0;

			Scanner read = new Scanner(new File(num));
			do {
				boolean b = false;
				String line = read.nextLine();

				for (int i = 0; i < map[0].length; i++) {

					char c = line.charAt(i * 2);
					if (c == 'c') {
						b = true;
					}

					revealed[counter][i] = b;
					map[counter][i] = c;

				}

				counter++;
			} while (read.hasNext());

		} catch (FileNotFoundException e) {
			System.out.println("File was not found");
		}

		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j]);
			}
			System.out.println();
		}

	}

	/**
	 * Char at loc returns the location of player
	 * 
	 * @param p
	 *            passes in a point
	 * @return char location
	 */
	public char getCharAtLoc(Point p) {
		return '1';
	}

	/**
	 * Display map method displays the map
	 * 
	 * @param p
	 *            passes in point object
	 */
	public void displayMap(Point p) {
		
		int x = (int) p.getX();
		int y = (int) p.getY();
		
		System.out.println(x);
		System.out.println(y);
		
		
		
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				
				if(x == i && y == j){
					System.out.print("S");
				}
				
				
				if(revealed[i][j] == false){
					System.out.print("x");
				}else{
					
					System.out.print(map[i][j]);
				}
				
			
			}
			System.out.println();
		}
		
	}

	/**
	 * Find Start Location method finds the location fo point
	 * 
	 * @return a point object
	 */
	public Point findStartLocation() {
		Point p = new Point(0, 0);
		p.setLocation(2, 0);

		int x = (int) p.getX();
		int y = (int) p.getY();
			System.out.println(x);
			System.out.println(y);
		//map[x][y] = 'S';
		p = new Point(x, y);

		return p;

	}

	/**
	 * Reveal method Reveals point
	 * 
	 * @param p
	 *            passes in point
	 */
	public void reveal(Point p) {

	}

	/**
	 * remote oponent at location
	 * 
	 * @param p
	 */
	public void remoteOppAtLoc(Point p) {

	}
}
