import java.util.HashMap;

public class Computer {

	private HashMap<Pattern, Integer> description;
	private Pattern p;
	private int i = 1;

	public Computer() {
		description = new HashMap<Pattern, Integer>();
	}

	public int makePrediction(String newP) {
		int prediction = 0;

		Pattern s = storePattern(new Pattern(newP));
		System.out.println("get " + description.get(s));
		System.out.println("contains " + description.containsKey(s));

		if (!description.isEmpty()) {

			String p1 = "";
			String p2 = "";
			String p3 = "";

			if (newP.length() == 4) {

				p1 = newP.substring(0, 3) + "f";
				p2 = newP.substring(0, 3) + "w";
				p3 = newP.substring(0, 3) + "g";

			} else if (newP.length() == 8) {

				p1 = newP.substring(0, 7) + "f";
				p2 = newP.substring(0, 7) + "w";
				p3 = newP.substring(0, 7) + "g";

				System.out.println(p1);
				System.out.println(p2);
				System.out.println(p3);

			}
			Pattern pat1 = new Pattern(p1);
			Pattern pat2 = new Pattern(p2);
			Pattern pat3 = new Pattern(p3);

			if (description.containsKey(pat1) == false) {
				System.out.println("does not contain pat1");
				description.put(pat1, 0);
			}

			if (description.containsKey(pat2) == false) {
				System.out.println("does not contain pat2");
				description.put(pat2, 0);
			}

			if (description.containsKey(pat3) == false) {
				System.out.println("does not contain pat3");
				System.out.println("p3");
				description.put(pat3, 0);
			}

			// 1.fire beats 3.grass
			// 3.grass beats 2.water
			// 2.water beats 1.fire

			if ((description.get(pat1) > description.get(pat2)) && (description.get(pat1) > description.get(pat3))) {
				System.out.println("f");
				prediction = 2;// water

			} else if ((description.get(pat2) > description.get(pat1))
					&& (description.get(pat2) > description.get(pat3))) {
				System.out.println("w");
				prediction = 3;// grass
			} else if ((description.get(pat3) > description.get(pat1))
					&& (description.get(pat3) > description.get(pat2))) {
				System.out.println("g");
				prediction = 1;// fire
			} else {
				int randChoice = (int) (Math.random() * 3) + 1;
				System.out.println("rand" + randChoice);
				prediction = randChoice;
			}

		} else {
			int randChoice = (int) (Math.random() * 3) + 1;
			System.out.println("rand" + randChoice);
			prediction = randChoice;
		}

		return prediction;
	}

	public Pattern storePattern(Pattern s) {

		System.out.println("waht is it " + description.get(s));

		if (description.containsKey(s) == true) {
			System.out.println("huh");

			int i = description.get(s) + 1;
			description.put(s, i++);
			System.out.println("iterator " + i);

		} else {
			description.put(s, i);
		}

		System.out.println("waht is it " + description.get(s));
		System.out.println("waht is it " + description.containsKey(s));

		return s;
	}
}
